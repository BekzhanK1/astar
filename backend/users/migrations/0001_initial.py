# Generated by Django 5.1.2 on 2024-11-03 14:47

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(unique=True, verbose_name='number')),
                ('start_date', models.DateField(auto_now_add=True, verbose_name='start date')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('role', models.CharField(blank=True, choices=[('superadmin', 'Superadmin'), ('supervisor', 'Supervisor'), ('curator', 'Curator'), ('teacher', 'Teacher')], max_length=30, verbose_name='role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=30, unique=True, verbose_name='code')),
                ('level', models.CharField(choices=[('elementary', 'Elementary'), ('pre-intermediate', 'Pre-intermediate'), ('intermediate', 'Intermediate'), ('upper-intermediate', 'Upper-intermediate')], max_length=30, verbose_name='level')),
                ('curator', models.ForeignKey(limit_choices_to={'role': 'curator'}, on_delete=django.db.models.deletion.CASCADE, related_name='curated_groups', to=settings.AUTH_USER_MODEL)),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='users.flow')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, verbose_name='end time')),
                ('event_type', models.CharField(choices=[('lesson', 'Lesson'), ('meeting', 'Meeting')], default='lesson', max_length=10)),
                ('event_link', models.URLField(blank=True, null=True, verbose_name='event link')),
                ('number_of_students', models.PositiveIntegerField(default=0, verbose_name='number of students')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='users.group')),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 'teacher'}, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, verbose_name='end time')),
                ('event_type', models.CharField(choices=[('lesson', 'Lesson'), ('meeting', 'Meeting')], default='lesson', max_length=10)),
                ('event_link', models.URLField(blank=True, null=True, verbose_name='event link')),
                ('name', models.TextField(verbose_name='name')),
                ('participants', models.ManyToManyField(related_name='meetings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
